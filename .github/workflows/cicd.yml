name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:

permissions:
  actions: read
  contents: read

jobs:
  prepare:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          ssh-key: ${{ secrets.ACTIONS_DEPLOY_KEY }}

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20.11.0'

      - name: Bump version in package.json
        run: |
          npm run swagger
          npm version patch --no-git-tag-version
          NEW_VERSION=$(node -p "require('./package.json').version")
          git config --global user.email "michael+cicd@offisito.com"
          git config --global user.name "GitHub Action"
          git commit -am "chore(release): bump version to $NEW_VERSION [skip ci]"
          git tag v$NEW_VERSION

      - name: Set up Git with SSH for pushing
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.ACTIONS_DEPLOY_KEY }}" > ~/.ssh/id_ed25519
          chmod 600 ~/.ssh/id_ed25519
          ssh-keyscan github.com >> ~/.ssh/known_hosts
          git config user.name 'github-actions'
          git config user.email 'github-actions@github.com'
          git push git@github.com:${{ github.repository }} HEAD:${{ github.ref_name }}





  build_server:
    needs: prepare
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Get version from package.json
        id: package_version
        run: echo "::set-output name=version::$(cat package.json | jq -r .version)"


      - name: Build, tag, and push server image to Amazon ECR
        env:
          ECR_REPOSITORY: server
        run: |
          ECR_REGISTRY=${{ steps.login-ecr.outputs.ecr_registry }}
          IMAGE_TAG=${{ steps.login-ecr.outputs.image_tag }}
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -f ./apps/server/Dockerfile .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG


  build_guest:
    needs: prepare
    runs-on: ubuntu-latest
    steps:
      - name: Build, tag, and push guest image to Amazon ECR
        env:
          ECR_REPOSITORY: guest
        run: |
          ECR_REGISTRY=${{ needs.prepare.outputs.ecr_registry }}
          IMAGE_TAG=${{ needs.prepare.outputs.image_tag }}
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -f ./apps/guest/Dockerfile .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG


  build_host:
    needs: prepare
    runs-on: ubuntu-latest
    steps:
      - name: Build, tag, and push host image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ needs.prepare.outputs.ecr_registry }}
          ECR_REPOSITORY: host
          IMAGE_TAG: ${{ needs.prepare.outputs.image_tag }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -f ./apps/host/Dockerfile .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG


  update_task_definitions_and_services:
    needs: [ build_server, build_guest, build_host ]
    runs-on: ubuntu-latest
    steps:
      - name: Render Amazon ECS task definition for Server
        id: render-task-definition-server
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          input: ecs-task-def-server.json
          image: ${{ steps.login-ecr.outputs.registry }}/server:${{ steps.package_version.outputs.version }}

      - name: Render Amazon ECS task definition for Guest
        id: render-task-definition-guest
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          input: ecs-task-def-guest.json
          image: ${{ steps.login-ecr.outputs.registry }}/guest:${{ steps.package_version.outputs.version }}

      - name: Render Amazon ECS task definition for Host
        id: render-task-definition-host
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          input: ecs-task-def-host.json
          image: ${{ steps.login-ecr.outputs.registry }}/host:${{ steps.package_version.outputs.version }}


      - name: Register task definition for Server
        run: |
          aws ecs register-task-definition --cli-input-json file://${{ steps.render-task-definition-server.outputs.task-definition }}

      - name: Register task definition for Guest
        run: |
          aws ecs register-task-definition --cli-input-json file://${{ steps.render-task-definition-guest.outputs.task-definition }}

      - name: Register task definition for Host
        run: |
          aws ecs register-task-definition --cli-input-json file://${{ steps.render-task-definition-host.outputs.task-definition }}

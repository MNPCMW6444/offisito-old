name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:

permissions:
  actions: read
  contents: read

jobs:
  prepare:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          ssh-key: ${{ secrets.ACTIONS_DEPLOY_KEY }}

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20.11.0'

      - name: Bump version in package.json
        run: |
          npm run swagger
          npm version patch --no-git-tag-version
          NEW_VERSION=$(node -p "require('./package.json').version")
          git config --global user.email "michael+cicd@offisito.com"
          git config --global user.name "GitHub Action"
          git commit -am "chore(release): bump version to $NEW_VERSION [skip ci]"
          git tag v$NEW_VERSION


      - name: Extract version from package.json
        id: image_tag_step
        run: |
          echo "IMAGE_TAG=$(cat package.json | jq -r .version)" >> $GITHUB_ENV
          echo "::set-output name=image_tag::$(cat package.json | jq -r .version)"


      - name: Set up Git with SSH for pushing
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.ACTIONS_DEPLOY_KEY }}" > ~/.ssh/id_ed25519
          chmod 600 ~/.ssh/id_ed25519
          ssh-keyscan github.com >> ~/.ssh/known_hosts
          git config user.name 'github-actions'
          git config user.email 'github-actions@github.com'
          git push git@github.com:${{ github.repository }} HEAD:${{ github.ref_name }}

  build_server:
    needs: prepare
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20.11.0'



      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push server image to Amazon ECR
        run: |
          IMAGE_TAG=${{ needs.prepare.outputs.image_tag }}
          ECR_REGISTRY=${{ steps.login-ecr.outputs.registry }}
          docker build -t $ECR_REGISTRY/server:$IMAGE_TAG -f ./apps/server/Dockerfile .
          docker push $ECR_REGISTRY/server:$IMAGE_TAG


  build_guest:
    needs: prepare
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20.11.0'



      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push guest image to Amazon ECR
        run: |
          IMAGE_TAG=${{ needs.prepare.outputs.image_tag }}
          ECR_REGISTRY=${{ steps.login-ecr.outputs.registry }}
          docker build -t $ECR_REGISTRY/guest:$IMAGE_TAG -f ./apps/guest/Dockerfile .
          docker push $ECR_REGISTRY/guest:$IMAGE_TAG


  build_host:
    needs: prepare
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20.11.0'



      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push host image to Amazon ECR
        run: |
          IMAGE_TAG=${{ needs.prepare.outputs.image_tag }}
          ECR_REGISTRY=${{ steps.login-ecr.outputs.registry }}
          docker build -t $ECR_REGISTRY/host:$IMAGE_TAG -f ./apps/host/Dockerfile .
          docker push $ECR_REGISTRY/host:$IMAGE_TAG

  update_task_definitions_and_services:
    needs: [ prepare, build_server, build_guest, build_host ]
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1



      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Fetch current Server task definition
        id: current-task-def-server
        run: |
          aws ecs describe-task-definition --task-definition server > current-server-task-def.json

      - name: Fetch current Guest task definition
        id: current-task-def-guest
        run: |
          aws ecs describe-task-definition --task-definition guest > current-guest-task-def.json

      - name: Fetch current Host task definition
        id: current-task-def-host
        run: |
          aws ecs describe-task-definition --task-definition host > current-host-task-def.json

      - name: Update task definition for server
        run: |
          IMAGE_TAG=${{ needs.prepare.outputs.image_tag }}
          jq --arg image_tag "$IMAGE_TAG" --arg ecr_registry "${{ steps.login-ecr.outputs.registry }}" '.taskDefinition.containerDefinitions[0].image = $ecr_registry + "/server:" + $image_tag' current-server-task-def.json > intermediate-server-task-def.json
          jq '.taskDefinition | del(.taskDefinitionArn, .status, .revision, .registeredAt, .registeredBy, .requiresAttributes, .compatibilities)' intermediate-server-task-def.json > final-server-task-def.json

      - name: Update task definition for guest
        run: |
          IMAGE_TAG=${{ needs.build_guest.outputs.image_tag }}
          jq --arg image_tag "$IMAGE_TAG" --arg ecr_registry "${{ steps.login-ecr.outputs.registry }}" '.taskDefinition.containerDefinitions[0].image = $ecr_registry + "/guest:" + $image_tag' current-guest-task-def.json > intermediate-guest-task-def.json
          jq '.taskDefinition | del(.taskDefinitionArn, .status, .revision, .registeredAt, .registeredBy, .requiresAttributes, .compatibilities)' intermediate-guest-task-def.json > final-guest-task-def.json

      - name: Update task definition for host
        run: |
          IMAGE_TAG=${{ needs.build_host.outputs.image_tag }}
          jq --arg image_tag "$IMAGE_TAG" --arg ecr_registry "${{ steps.login-ecr.outputs.registry }}" '.taskDefinition.containerDefinitions[0].image = $ecr_registry + "/host:" + $image_tag' current-host-task-def.json > intermediate-host-task-def.json
          jq '.taskDefinition | del(.taskDefinitionArn, .status, .revision, .registeredAt, .registeredBy, .requiresAttributes, .compatibilities)' intermediate-host-task-def.json > final-host-task-def.json

      - name: Register task definition for server
        run: |
          aws ecs register-task-definition --cli-input-json file://final-server-task-def.json

      - name: Register task definition for guest
        run: |
          aws ecs register-task-definition --cli-input-json file://final-guest-task-def.json

      - name: Register task definition for host
        run: |
          aws ecs register-task-definition --cli-input-json file://final-host-task-def.json

      - name: Update ECS Service for server
        run: |
          aws ecs update-service --cluster prod --service server --task-definition server

      - name: Update ECS Service for guest
        run: |
          aws ecs update-service --cluster prod --service guest --task-definition guest

      - name: Update ECS Service for host
        run: |
          aws ecs update-service --cluster prod --service host --task-definition host


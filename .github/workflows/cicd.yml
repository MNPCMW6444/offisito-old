name: CI
on:
  push:
    branches:
      - main
  pull_request:

permissions:
  actions: read
  contents: read

jobs:
  prepare_with_nx:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: actions/setup-node@v3
        with:
          node-version: '20.11.0'
          cache: 'npm'
      - run: npm ci
      - uses: nrwl/nx-set-shas@v3

      - run: npx nx-cloud record -- nx format:check
      - run: npx nx affected -t lint,test,build --parallel=3

  build_and_push:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    #needs: prepare_with_nx
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Bump version and push tag
        if: github.ref == 'refs/heads/main'
        uses: phips28/gh-action-bump-version@v6.x
        with:
          tag-prefix: '' # Set this to your preference
        env:
          GITHUB_TOKEN: ${{ secrets.ITHUB_TOKEN }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Get version from package.json
        id: package_version
        run: echo "::set-output name=version::$(jq -r .version apps/server/package.json)"
        shell: bash

      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: server
          IMAGE_TAG: ${{ steps.package_version.outputs.version }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -f apps/server/Dockerfile .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG


      - name: Build, tag, and guest server to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: guest
          IMAGE_TAG: ${{ steps.package_version.outputs.version }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -f apps/guest/Dockerfile .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

        # ... remaining steps for ECS task definition and deployment ...


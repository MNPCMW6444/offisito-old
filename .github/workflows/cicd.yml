name: CICD
on:
  push:
    branches:
      - main
  pull_request:

permissions:
  actions: read
  contents: read

jobs:
  #  prepare_with_nx:
  #    runs-on: ubuntu-latest
  #  steps:
  #    - uses: actions/checkout@v4
  #      with:
  #        fetch-depth: 0
  #    - uses: actions/setup-node@v3
  #      with:
  #        node-version: '20.11.0'
  #        cache: 'npm'
  #    - run: npm i
  #    - uses: nrwl/nx-set-shas@v3
  #    - run: npx nx-cloud record -- nx format:check
  #    - run: npx nx affected -t lint,test,build --parallel=3

  build_and_push:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    #needs: prepare_with_nx
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          ssh-key: ${{ secrets.ACTIONS_DEPLOY_KEY }}

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20.11.0'

      - name: Bump version in package.json
        run: |
          npm version patch --no-git-tag-version
          NEW_VERSION=$(node -p "require('./package.json').version")
          git config --global user.email "michael+cicd@offisito.com"
          git config --global user.name "GitHub Action"
          git commit -am "chore(release): bump version to $NEW_VERSION [skip ci]"
          git tag v$NEW_VERSION

      - name: Set up Git with SSH for pushing
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.ACTIONS_DEPLOY_KEY }}" > ~/.ssh/id_ed25519
          chmod 600 ~/.ssh/id_ed25519
          ssh-keyscan github.com >> ~/.ssh/known_hosts
          git config user.name 'github-actions'
          git config user.email 'github-actions@github.com'
          git push git@github.com:${{ github.repository }} HEAD:${{ github.ref_name }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Get version from package.json
        id: package_version
        run: echo "::set-output name=version::$(cat package.json | jq -r .version)"

      - name: Build, tag, and push server image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: server
          IMAGE_TAG: ${{ steps.package_version.outputs.version }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -f ./apps/server/Dockerfile .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      - name: Build, tag, and push guest image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: guest
          IMAGE_TAG: ${{ steps.package_version.outputs.version }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -f ./apps/guest/Dockerfile .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG


      # ... remaining steps for ECS task definition and deployment ...
